import time
import json
import chardet
import gzip
import brotli
from loguru import logger
from seleniumwire import webdriver

def decode_response_body(body, headers):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–∂–∞—Ç–∏–µ."""
    encoding = headers.get('Content-Encoding', '').lower()
    
    try:
        if encoding == 'gzip':
            body = gzip.decompress(body)
        elif encoding == 'br':
            body = brotli.decompress(body)
    except Exception as e:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ ({encoding}): {e}")

    detected_encoding = chardet.detect(body)['encoding'] or 'utf-8'
    
    try:
        decoded_text = body.decode(detected_encoding, errors='replace')
    except Exception as e:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {detected_encoding}: {e}")
        decoded_text = body.decode('utf-8', errors='replace')

    return decoded_text

def get_tgstat_channel_stats(channel_url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram-–∫–∞–Ω–∞–ª–∞ —Å Tgstat, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã."""
    options = webdriver.FirefoxOptions()
    options.headless = False  # –î–µ–ª–∞–µ–º –≤–∏–¥–∏–º—ã–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920x1080")

    driver = webdriver.Firefox(options=options)

    try:
        logger.info(f"üåç –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {channel_url}")
        driver.get(channel_url)
        time.sleep(10)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö

        logger.info("üì° –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
        for request in driver.requests:
            if not request.response:
                continue
            
            url = request.url
            status = request.response.status_code
            content_type = request.response.headers.get("Content-Type", "")

            logger.info(f"üîç –ó–∞–ø—Ä–æ—Å: {url} (–°—Ç–∞—Ç—É—Å: {status}, Content-Type: {content_type})")
            logger.info(f"üìú –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {request.headers}")
            
            if "application/json" in content_type:
                decoded_response = decode_response_body(request.response.body, request.response.headers)
                
                if decoded_response.startswith("{") or decoded_response.startswith("["):
                    try:
                        parsed_json = json.loads(decoded_response)
                        logger.info(f"üì• JSON-–æ—Ç–≤–µ—Ç: {json.dumps(parsed_json, indent=4, ensure_ascii=False)}")
                        return parsed_json
                    except json.JSONDecodeError as e:
                        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
                else:
                    logger.info(f"üìú –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {decoded_response[:500]}")

    finally:
        logger.info("‚ùé –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver.quit()
