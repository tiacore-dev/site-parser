import time
import gzip
import brotli
import chardet
import json
from loguru import logger
from seleniumwire import webdriver

def decode_response_body(body, headers):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É."""
    content_encoding = headers.get("Content-Encoding", "").lower()

    try:
        if "gzip" in content_encoding:
            logger.info("üóú –î–µ–∫–æ–¥–∏—Ä—É–µ–º Gzip...")
            body = gzip.decompress(body)
        elif "br" in content_encoding:
            logger.info("üóú –î–µ–∫–æ–¥–∏—Ä—É–µ–º Brotli...")
            body = brotli.decompress(body)
    except Exception as e:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ({content_encoding}): {e}")

    detected_encoding = chardet.detect(body)["encoding"] or "utf-8"

    try:
        decoded_text = body.decode(detected_encoding, errors="replace")
    except Exception as e:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {detected_encoding}: {e}")
        decoded_text = body.decode("utf-8", errors="replace")

    return decoded_text

def get_tgstat_channel_stats(channel_url):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç TGStat, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏."""
    options = webdriver.FirefoxOptions()
    options.headless = False  # –ú–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ True, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920x1080")

    # –î–æ–±–∞–≤–ª—è–µ–º user-agent
    user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/122.0"
    options.set_preference("general.useragent.override", user_agent)
    options.set_preference("dom.webdriver.enabled", False)
    options.set_preference("useAutomationExtension", False)

    driver = webdriver.Firefox(options=options)

    # –û—Ç–∫–ª—é—á–∞–µ–º navigator.webdriver
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
    cookies = [
        {"name": "_ga", "value": "GA1.1.1637606804.1740467729", "domain": ".tgstat.ru"},
        {"name": "_gid", "value": "GA1.2.1056863450.1740467730", "domain": ".tgstat.ru"},
        {"name": "_tgstat_csrk", "value": "41ae707c15705364c526bbdeddfd9419c7c3bb05115721bab49888eac3552285a%3A2%3A%7Bi%3A0%3Bs%3A12%3A%22_tgstat_csrk%22%3Bi%3A1%3Bs%3A32%3A%229p8Dn-_kehOcJOJ0s6aQBF3G_wrZPCyX%22%3B%7D", "domain": ".tgstat.ru"},
        {"name": "cf_clearance", "value": "QRmDyAJxR7JG41wGU4OId5H1sGrYAEO2.W2JhFfSJpQ-1740476854-1.2.1.1-h9jnYfsd8Q.NL7jFLLIM6y9sQ_ZQgLrrGf2TxGrMGkrvSDHljIhBjK2VPchE1NEV3mDf3.SZ0Gjb_1bCYJgpIc10SNUe.OG.b43SFBbH143sMFTKOXhYDLqfuXB3fjs267euwvHGNULCjHVXIdQO_ycszz7B.lxrlzyQDnfr684XOSUbl8GJ_HXexGK6AKssWmUU_NfN6WmvYpTcCFIzxj_mzIENkCAO7aJUmlWF8wS1Z3Zh9w7eqA9OR3wHqHDUtEiw4FuzXJ4QoQgjM5W1j5YsFZG507HFI4MheGbBEbU", "domain": ".tgstat.ru"}
    ]

    driver.get("https://tgstat.ru")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏
    time.sleep(2)

    for cookie in cookies:
        driver.add_cookie(cookie)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    logger.info(f"üåç –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {channel_url}")
    driver.get(channel_url)
    time.sleep(10)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤

    logger.info("‚úÖ –ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
    intercept_requests = False
    if intercept_requests:
        for i, request in enumerate(driver.requests):
            if request.response:
                logger.info(f"üîç [{i}] –ó–∞–ø—Ä–æ—Å: {request.url}")
                content_type = request.response.headers.get("Content-Type", "Unknown")
                logger.info(f"üìú Content-Type: {content_type}")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                body = request.response.body

                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                decoded_text = decode_response_body(body, request.response.headers)

                # –ï—Å–ª–∏ —ç—Ç–æ JSON, –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
                if "application/json" in content_type:
                    try:
                        parsed_json = json.loads(decoded_text)
                        logger.info(f"üì• JSON-–æ—Ç–≤–µ—Ç:\n{json.dumps(parsed_json, indent=4, ensure_ascii=False)}")
                    except json.JSONDecodeError:
                        logger.warning("‚ö† JSON-–æ—Ç–≤–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ —Ç–µ–∫—Å—Ç.")
                        logger.info(f"üìú –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤): {decoded_text[:1000]}")
                else:
                    logger.info(f"üìú –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤): {decoded_text[:1000]}")

    finally:
        logger.info("‚ùé –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver.quit()

