import time
import json
import gzip
import brotli
import chardet
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from loguru import logger
from app.utils.driver import create_firefox_driver


# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–ü–ê–ö–û–í–ö–ò –î–ê–ù–ù–´–• ---
def decode_response_body(body, headers):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –∏ –∫–æ–¥–∏—Ä–æ–≤–∫—É."""
    content_encoding = headers.get("Content-Encoding", "").lower()

    try:
        if "gzip" in content_encoding:
            logger.info("üóú –î–µ–∫–æ–¥–∏—Ä—É–µ–º Gzip...")
            body = gzip.decompress(body)
        elif "br" in content_encoding:
            logger.info("üóú –î–µ–∫–æ–¥–∏—Ä—É–µ–º Brotli...")
            body = brotli.decompress(body)
    except Exception as e:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ({content_encoding}): {e}")

    detected_encoding = chardet.detect(body)["encoding"] or "utf-8"

    try:
        decoded_text = body.decode(detected_encoding, errors="replace")
    except Exception as e:
        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ {detected_encoding}: {e}")
        decoded_text = body.decode("utf-8", errors="replace")

    return decoded_text


# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
def get_tgstat_channel_stats(channel_url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram-–∫–∞–Ω–∞–ª–∞ —Å Tgstat, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏."""
    driver = create_firefox_driver()
    
    try:
        logger.info(f"üåç –û—Ç–∫—Ä—ã–≤–∞–µ–º TGStat –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏...")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º TGStat –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫
        driver.get("https://tgstat.ru")
        time.sleep(2)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é)
        cookies = [
            {"name": "_ga", "value": "GA1.1.1637606804.1740467729", "domain": ".tgstat.ru"},
            {"name": "_gid", "value": "GA1.2.1056863450.1740467730", "domain": ".tgstat.ru"},
            {"name": "_tgstat_csrk", "value": "41ae707c15705364c526bbdeddfd9419c7c3bb05115721bab49888eac3552285a%3A2%3A%7Bi%3A0%3Bs%3A12%3A%22_tgstat_csrk%22%3Bi%3A1%3Bs%3A32%3A%229p8Dn-_kehOcJOJ0s6aQBF3G_wrZPCyX%22%3B%7D", "domain": ".tgstat.ru"},
            {"name": "cf_clearance", "value": "QRmDyAJxR7JG41wGU4OId5H1sGrYAEO2.W2JhFfSJpQ-1740476854-1.2.1.1-h9jnYfsd8Q.NL7jFLLIM6y9sQ_ZQgLrrGf2TxGrMGkrvSDHljIhBjK2VPchE1NEV3mDf3.SZ0Gjb_1bCYJgpIc10SNUe.OG.b43SFBbH143sMFTKOXhYDLqfuXB3fjs267euwvHGNULCjHVXIdQO_ycszz7B.lxrlzyQDnfr684XOSUbl8GJ_HXexGK6AKssWmUU_NfN6WmvYpTcCFIzxj_mzIENkCAO7aJUmlWF8wS1Z3Zh9w7eqA9OR3wHqHDUtEiw4FuzXJ4QoQgjM5W1j5YsFZG507HFI4MheGbBEbU", "domain": ".tgstat.ru"}
        ]

        for cookie in cookies:
            driver.add_cookie(cookie)

        logger.info("‚úÖ –ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–∞–ª–∞...")
        driver.get(channel_url)
        time.sleep(5)

        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä—É–∑–∏–ª—Å—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(3)

        stats = {}

        def get_stat(xpath, stat_name):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ XPATH."""
            try:
                element = WebDriverWait(driver, 15).until(
                    EC.presence_of_element_located((By.XPATH, xpath))
                )
                stats[stat_name] = element.text.strip()
                logger.info(f"{stat_name}: {stats[stat_name]}")
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {stat_name}: {e}")

        # --- –°–ë–û–† –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
        get_stat("//div[contains(text(), '–ø–æ–¥–ø–∏—Å—á–∏–∫–∏')]/preceding-sibling::h2", "subscribers")
        get_stat("//div[contains(text(), '—Å—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç')]/preceding-sibling::h2", "average_views")
        get_stat("//div[contains(text(), '–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (ER)')]/preceding-sibling::h2", "engagement_rate")
        get_stat("//span[contains(text(), '–∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω')]/preceding-sibling::b", "creation_date")
        get_stat("//div[contains(text(), '–ø—É–±–ª–∏–∫–∞—Ü–∏–∏')]/preceding-sibling::h2", "total_posts")
        get_stat("//div[contains(text(), '–∏–Ω–¥–µ–∫—Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')]/preceding-sibling::h2", "citation_index")

        return {"channel_url": channel_url, "stats": stats}

    except Exception as e:
        logger.error(f"‚ö† –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return {"channel_url": channel_url, "error": str(e)}

    finally:
        logger.info("‚ùé –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver.quit()

