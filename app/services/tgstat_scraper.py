import time
import gzip
import brotli
import chardet
from loguru import logger
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Selenium Wire –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ SeleniumS
from seleniumwire import webdriver


def get_tgstat_channel_stats(channel_url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram-–∫–∞–Ω–∞–ª–∞ —Å Tgstat, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—è AJAX-–∑–∞–ø—Ä–æ—Å—ã."""
    options = webdriver.FirefoxOptions()
    options.headless = True
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--no-sandbox")  # –ë–µ–∑ –ø–µ—Å–æ—á–Ω–∏—Ü—ã
    options.add_argument("--disable-gpu")  # –ë–µ–∑ GPU
    options.add_argument("--window-size=1920x1080")  # –§–∏–∫—Å –±–∞–≥–æ–≤ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    driver = webdriver.Firefox(options=options)

    try:
        logger.info(f"üåç –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {channel_url}")
        driver.get(channel_url)
        time.sleep(5)

        logger.info("üì° –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
        for request in driver.requests:
            
            if "stat" in request.url and request.response:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ API: {request.url}")
                logger.info(f"üîç –ê—Ç—Ä–∏–±—É—Ç—ã response: {dir(request.response)}")
                body = request.response.body
                with open("tgstat_raw_response.bin", "wb") as f:
                    f.write(body)
                logger.info("üìÇ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª tgstat_raw_response.bin")
                logger.info(f"üîç HEX-–¥–∞–º–ø –ø–µ—Ä–≤—ã—Ö 100 –±–∞–π—Ç–æ–≤: {body[:100].hex()}")

                content_encoding = request.response.headers.get("Content-Encoding", "")
                if "charset=" in content_encoding:
                    response_encoding = content_encoding.split("charset=")[-1]
                else:
                    try:
                        if "gzip" in content_encoding:
                            logger.info("üóú –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —è–≤–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å Gzip...")
                            body = gzip.decompress(body)
                        elif "br" in content_encoding:
                            logger.info("üóú –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —è–≤–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å Brotli...")
                            body = brotli.decompress(body)
                    except Exception as e:
                        logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {e}")
                    detected = chardet.detect(body)
                    response_encoding = detected["encoding"] if detected["encoding"] else "utf-8"
                    logger.info(f"üìä –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞: {response_encoding}")

                    response_encoding = detected["encoding"] if detected["encoding"] else "utf-8"

                try:
                    response_text = body.decode(response_encoding, errors="replace")
                    logger.info(f"üì• –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text[:1000]}")  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–ø–∞–º–∏—Ç—å –ª–æ–≥–∏
                except Exception as e:
                    logger.warning(f"‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

                logger.info(f"üì• –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text}")

                break  # –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç JSON, –µ—Å–ª–∏ –æ–Ω –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    finally:
        logger.info("‚ùé –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver.quit()
