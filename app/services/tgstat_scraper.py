import time
from loguru import logger
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from app.utils.driver import create_firefox_driver


def get_tgstat_channel_stats(channel_url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram-–∫–∞–Ω–∞–ª–∞ —Å Tgstat, –∏–º–∏—Ç–∏—Ä—É—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Å–∞–π—Ç–æ–º."""
    driver = create_firefox_driver()

    try:
        logger.info(f"üåç –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {channel_url}")
        driver.get(channel_url)
        time.sleep(5)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        for _ in range(3):
            driver.execute_script(
                "window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)

        # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–∞—Ç—å –ø–æ –≤–∫–ª–∞–¥–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        def click_tab(tab_text):
            try:
                tab = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable(
                        (By.XPATH, f"//div[contains(text(), '{tab_text}')]"))
                )
                tab.click()
                logger.info(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –≤–∫–ª–∞–¥–∫–µ: {tab_text}")
                time.sleep(2)  # –î–∞—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            except Exception as e:
                logger.warning(
                    f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –≤–∫–ª–∞–¥–∫–µ '{tab_text}': {e}")

        click_tab("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏")
        click_tab("–ò–Ω–¥–µ–∫—Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        click_tab("–û—Ö–≤–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π")

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        stats = {}

        def find_stat(label, xpath):
            """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ª–æ–≥–∞–º–∏."""
            try:
                logger.info(f"üîç –ò—â–µ–º '{label}'...")
                value = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.XPATH, xpath))
                ).text.strip()
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ '{label}': {value}")
                return value
            except Exception as e:
                logger.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ '{label}': {e}")
                return None

        stats["subscribers"] = find_stat(
            "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "//h2[contains(text(), '–ø–æ–¥–ø–∏—Å—á–∏–∫–∏')]/preceding-sibling::h2")
        stats["average_views"] = find_stat(
            "–°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç", "//h2[contains(text(), '—Å—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç')]/preceding-sibling::h2")
        stats["engagement_rate"] = find_stat(
            "–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å", "//h2[contains(text(), '–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (ER)')]/preceding-sibling::h2")
        stats["total_posts"] = find_stat(
            "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏", "//h2[contains(text(), '–ø—É–±–ª–∏–∫–∞—Ü–∏–∏')]/preceding-sibling::h2")
        stats["citation_index"] = find_stat(
            "–ò–Ω–¥–µ–∫—Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "//h2[contains(text(), '–∏–Ω–¥–µ–∫—Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')]/preceding-sibling::h2")

        logger.info(f"üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {stats}")
        return {"channel_url": channel_url, "stats": stats}

    finally:
        logger.info("‚ùé –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver.quit()
