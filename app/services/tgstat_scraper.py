import time
from loguru import logger
from bs4 import BeautifulSoup
from app.utils.driver import create_firefox_driver


def get_tgstat_channel_stats(channel_url):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Telegram-–∫–∞–Ω–∞–ª–∞ —Å Tgstat."""
    driver = create_firefox_driver()

    try:
        logger.info(f"üåç –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {channel_url}")
        driver.get(channel_url)
        time.sleep(5)

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        for _ in range(3):  # –°–∫—Ä–æ–ª–ª–∏–º 3 —Ä–∞–∑–∞, —á—Ç–æ–±—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å
            driver.execute_script(
                "window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)

        logger.info("‚úÖ –ó–∞–∫–æ–Ω—á–∏–ª–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥, –ø–æ–ª—É—á–∞–µ–º HTML...")

        # –ü–æ–ª—É—á–∞–µ–º HTML –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        page_html = driver.page_source

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å—Ç—å
        logger.info(f"üîç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ñ—Ä–∞–≥–º–µ–Ω—Ç): {page_html[:2000]}")

        # –ü–µ—Ä–µ–¥–∞–µ–º HTML –≤ BeautifulSoup
        soup = BeautifulSoup(page_html, "html.parser")

        stats = {}

        def find_stat(label):
            """–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É."""
            logger.info(f"üîç –ò—â–µ–º '{label}' –≤ HTML...")
            tag = soup.find(lambda tag: tag.name ==
                            "div" and label.lower() in tag.text.lower())

            if tag:
                h2 = tag.find_previous_sibling("h2")
                if h2:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω '{label}': {h2.text.strip()}")
                    return h2.text.strip()
                else:
                    logger.warning(
                        f"‚ö† –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏–π <h2> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {tag.text.strip()}")
            else:
                logger.warning(f"‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω '{label}' –≤ HTML!")

            return None

        # –ü–∞—Ä—Å–∏–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        stats["subscribers"] = find_stat("–ø–æ–¥–ø–∏—Å—á–∏–∫–∏")
        stats["average_views"] = find_stat("—Å—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç")
        stats["engagement_rate"] = find_stat("–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (er)")
        stats["total_posts"] = find_stat("–ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        stats["citation_index"] = find_stat("–∏–Ω–¥–µ–∫—Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        logger.info("üîç –ò—â–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞...")
        date_tag = soup.find(lambda tag: tag.name ==
                             "span" and "–∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω" in tag.text.lower())
        if date_tag:
            creation_date = date_tag.find_previous_sibling("b")
            if creation_date:
                stats["creation_date"] = creation_date.text.strip()
                logger.info(
                    f"‚úÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {creation_date.text.strip()}")
            else:
                logger.warning("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–≥ <b> –ø–µ—Ä–µ–¥ –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è!")
        else:
            logger.warning("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è!")

        logger.info(f"üìä –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {stats}")

        return {"channel_url": channel_url, "stats": stats}

    finally:
        logger.info("‚ùé –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        driver.quit()
